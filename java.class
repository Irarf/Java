import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.KeyValueTextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

public class HW1 {

    public static class HW1Writable implements Writable
    {
        private Text metricId;
        private IntWritable timestamp;
        private IntWritable value;

        //Default Constructor
        public HW1Writable()
        {
            this.metricId = new Text();
            this.timestamp = new IntWritable();
            this.value = new IntWritable();
        }

        @Override
        //It serializes object data into byte stream data
        public void write(DataOutput out) throws IOException
        {
            metricId.write(out);
            timestamp.write(out);
            value.write(out);
            //Вот тут можно добавить цикл на обработку
        }

        @Override
        //overriding default readFields method.
        //It de-serializes the byte stream data
        public void readFields(DataInput in) throws IOException
        {
            metricId.readFields(in);
            timestamp.readFields(in);
            value.readFields(in);

        }


        public Text getmetricId(){
            return metricId;
        }



        //Setter method to set the values of WebLogWritable object
        public void set(Text metricId, IntWritable timestamp, IntWritable value)
        {
            this.metricId = metricId;
            this.timestamp = timestamp;
            this.value = value;
        }







    }


    public static class HW1Mapper
            extends Mapper<LongWritable, Text, HW1Writable, IntWritable>{

        private static final IntWritable one = new IntWritable();

        private final HW1Writable hwLog = new HW1Writable();

        private final IntWritable value = new IntWritable();
        private final IntWritable timestamp = new IntWritable();
        private Text metricId = new Text();





        public void map(LongWritable key, Text values, Context context
        ) throws IOException, InterruptedException {

            Scanner scan = new Scanner(new File("/root/laba1/bible"));
            String s = scan.useDelimiter(",").next();


            String[] array = s.split("\n");
            String[] words = value.toString().split(",");
            //metricId.set(words[0]);
            Text a1, a2, a3, a4, a5,a6,a7,a8,a9,a0;
            a1 = new Text(array[1]);
            a2 = new Text(array[2]);
            a3 = new Text(array[3]);
            a4 = new Text(array[4]);
            a5 = new Text(array[5]);
            a6 = new Text(array[6]);
            a7 = new Text(array[7]);
            a8 = new Text(array[8]);
            a9 = new Text(array[9]);
            a0 = new Text(array[0]);

            if ("1".equals(words[1])) {
                metricId = a1;
            } else if ("2".equals(words[2])) {
                metricId = a2;
            } else if ("3".equals(words[3])) {
                metricId = a3;
            } else if ("4".equals(words[4])) {
                metricId = a4;
            } else if ("5".equals(words[5])) {
                metricId = a5;
            } else if ("6".equals(words[6])) {
                metricId = a6;
            } else if ("7".equals(words[7])) {
                metricId = a7;
            } else if ("8".equals(words[8])) {
                metricId = a8;
            } else if ("9".equals(words[9])) {
                metricId = a9;
            } else {
                metricId = a0;
            }
            timestamp.set(Integer.parseInt(words[1]));
            value.set(Integer.parseInt(words[2]));
            hwLog.set(metricId,timestamp,value);

            //int values = Integer.parseInt(last1);
            context.write(hwLog, one);

        }
    }

    public static class HW1Reducer
            extends Reducer<HW1Writable,IntWritable,Text,IntWritable> {
        private final IntWritable result = new IntWritable();
        private Text Id = new Text();

        public void reduce(HW1Writable key, Iterable<IntWritable> values,
                           Context context
        ) throws IOException, InterruptedException {
            int sum = 0;
            Id = key.getmetricId();
            for (IntWritable val:values) {
                sum++;

            }
            result.set(sum);
            context.write(Id, result);

        }
    }
    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();

        conf.set("mapred.textoutputformat.separator", ",");

        Job job = Job.getInstance(conf, "HW1");
        job.setJarByClass(HW1.class);

        job.setMapperClass(HW1Mapper.class);
        //job.setCombinerClass(HW1Reducer.class);
        job.setReducerClass(HW1Reducer.class);
        job.setMapOutputKeyClass(HW1Writable.class);
        job.setMapOutputValueClass(IntWritable.class);

        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);
        // job.setInputFormatClass(KeyValueTextInputFormat.class);
        //  job.setOutputFormatClass(TextOutputFormat.class);


        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));
        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}
