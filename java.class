import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class HW1 {

    public static class TokenizerMapper
            extends Mapper<Object, Text, Text, IntWritable>{

        ArrayList<String> list = new ArrayList<>();

        public void map(Object key, Text value, Context context
        ) throws IOException, InterruptedException {
            try(Scanner scan = new Scanner(new File("/root/laba1/bible"))){
                while (scan.hasNextLine()){
                    list.add(scan.nextLine());
                }

            } catch (FileNotFoundException e){
                e.printStackTrace();
            }

            String[] array = list.toArray(new String[0]);
            String line = value.toString();
            String last1 = null;
            String time = null;
            StringTokenizer s = new StringTokenizer(line,",");
            //String[] parts = value.toString().split(",");
            String id = s.nextToken();


            id = id.equals("1") ? array[0] :
             id.equals("2") ? array[1] :
                    id.equals("3") ? array[2] :
                            id.equals("4") ? array[3] :
                                    id.equals("5") ? array[4] :
                                            id.equals("6") ? array[5] :
                                                    id.equals("7") ? array[6] :
                                                            id.equals("8") ? array[7] :
                                                                    id.equals("9") ? array[8] :
                                                                            id.equals("10") ? array[9] :
                                                                                        "error";
            while (s.hasMoreTokens()){

                last1 = s.nextToken();
            }
            int values = Integer.parseInt(last1);
            context.write(new Text(id), new IntWritable(values));

        }
    }

    public static class IntSumReducer
            extends Reducer<Text,IntWritable,Text,IntWritable> {
        private IntWritable result = new IntWritable();

        public void reduce(Text key, Iterable<IntWritable> values,
                           Context context
        ) throws IOException, InterruptedException {
            if (key.equals("error")){
                int countEr = 0;
                countEr++;
                result.set(countEr);
                context.write(key, result);
            }else {
                int countV = 0;
                int sum = 0;
                for (IntWritable val : values) {
                    sum += val.get();
                    countV++;
                }
                sum = sum / countV;
                result.set(sum);
                context.write(key, result);
            }
        }
    }
    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "word count");
        job.setJarByClass(HW1.class);

        job.setMapperClass(TokenizerMapper.class);
        job.setCombinerClass(IntSumReducer.class);
        job.setReducerClass(IntSumReducer.class);

        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);

        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));
        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}
