import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class HW1 {

    public static class TokenizerMapper
            extends Mapper<Object, Text, Text, IntWritable>{

        ArrayList<String> list = new ArrayList<>();

        public void setup (Context context) throws IOException{
            try(Scanner scan = new Scanner(new File("/root/laba1/bible"))){
                while (scan.hasNextLine()){
                    list.add(scan.nextLine());
                }

            } catch (FileNotFoundException e){
                e.printStackTrace();
            }
        }

        public void map(Object key, Text value, Context context
        ) throws IOException, InterruptedException {


            String[] array = list.toArray(new String[0]);
            String line = value.toString();
            String last1 = null;
            String time = null;
            StringTokenizer s = new StringTokenizer(line,",");
            //String[] parts = value.toString().split(",");
            String id = s.nextToken();

            switch (id) {
                case "1":
                    id = array[1];
                    break;
                case "2":
                    id = array[2];
                    break;
                case "3":
                    id = array[3];
                    break;
                case "4":
                    id = array[4];
                    break;
                case "5":
                    id = array[5];
                    break;
                case "6":
                    id = array[6];
                    break;
                case "7":
                    id = array[7];
                    break;
                case "8":
                    id = array[8];
                    break;
                case "9":
                    id = array[9];
                    break;
                default:
                    id = array[0];
                    break;
            }


                last1 = s.nextToken();

            int values = Integer.parseInt(last1);
            context.write(new Text(id), new IntWritable(values));

        }
    }

    public static class IntSumReducer
            extends Reducer<Text,IntWritable,Text,IntWritable> {
        private IntWritable result = new IntWritable();

        public void reduce(Text key, Iterable<IntWritable> values,
                           Context context
        ) throws IOException, InterruptedException {
            if (key.equals("error")){
                int countEr = 0;
                countEr++;
                result.set(countEr);
                context.write(key, result);
            }else {
                int countV = 0;
                int sum = 0;
                for (IntWritable val : values) {
                    sum += val.get();
                    countV++;
                }
                sum = sum / countV;
                result.set(sum);
                context.write(key, result);
            }
        }
    }
    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();

        conf.set("mapred.textoutputformat.separator", ",");

        Job job = Job.getInstance(conf, "HW1");
        job.setJarByClass(HW1.class);

        job.setMapperClass(TokenizerMapper.class);
        job.setCombinerClass(IntSumReducer.class);
        job.setReducerClass(IntSumReducer.class);

        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);


        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));
        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}
