import java.io.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.io.Text;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;

import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class wordcount
{

    public static class AgregWritable implements WritableComparable<AgregWritable>
    {
        private Text metricId;
        private IntWritable timestamp;
        private IntWritable value;

        //Default Constructor
        public AgregWritable()
        {
            this.metricId = new Text();
            this.timestamp = new IntWritable();
            this.value = new IntWritable();
        }

        //Custom Constructor
        public AgregWritable(Text metricId, IntWritable timestamp, IntWritable value)
        {
            this.metricId = metricId;
            this.timestamp = timestamp;
            this.value = value;
        }

        //Setter method to set the values of WebLogWritable object
        public void set(Text metricId, IntWritable timestamp, IntWritable value)
        {
            this.metricId = metricId;
            this.timestamp = timestamp;
            this.value = value;
        }

        public Text getIp()
        {
            return metricId;
        }

        @Override
        //overriding default readFields method.
        //It de-serializes the byte stream data
        public void readFields(DataInput in) throws IOException
        {
            metricId.readFields(in);
            timestamp.readFields(in);
            value.readFields(in);

        }

        @Override
        //It serializes object data into byte stream data
        public void write(DataOutput out) throws IOException
        {
            metricId.write(out);
            timestamp.write(out);
            value.write(out);
        }

        @Override
        public int compareTo(AgregWritable o)
        {
            if (metricId.compareTo(o.metricId)==0)
            {
                return (timestamp.compareTo(o.timestamp));
            }
            else return (metricId.compareTo(o.metricId));
        }



    }


    public static class TokenizerMapper
            extends Mapper<Object, Text, AgregWritable, IntWritable>{

        private final static IntWritable one = new IntWritable(1);
        //private Text word = new Text();

        public void map(Object key, Text value, Context context
        ) throws IOException, InterruptedException {

            String line = value.toString();

            //StringTokenizer itr = new StringTokenizer(line,",");
          //  String id = itr.nextToken();
            int time;

           // context.write(new Text(id), one);


        }
    }

    public static class IntSumReducer
            extends Reducer<AgregWritable,IntWritable,Text,IntWritable> {
        private IntWritable result = new IntWritable();
        private  Text id = new Text();

        public void reduce(AgregWritable key, Iterable<IntWritable> values,
                           Context context
        ) throws IOException, InterruptedException {
            int sum = 0;
            id = key.getIp();
            for (IntWritable val : values) {
                sum += val.get();
            }
            result.set(sum);
            context.write(id, result);
        }
    }

    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "word count");

        job.setJarByClass(wordcount.class);

        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));

        job.setMapperClass(TokenizerMapper.class);
        job.setCombinerClass(IntSumReducer.class);
        job.setReducerClass(IntSumReducer.class);

        job.setMapOutputKeyClass(AgregWritable.class);
        job.setOutputValueClass(IntWritable.class);

        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);



        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}
