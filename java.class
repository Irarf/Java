import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.KeyValueTextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

public class HW1 {

    public static class HW1Writable implements WritableComparable<HW1Writable>
    {
        private Text metricId;
        private Text timestamp;
        private IntWritable value;

        //Default Constructor
        public HW1Writable()
        {
            this.metricId = new Text();
            this.timestamp = new Text();
            this.value = new IntWritable();
        }
        public HW1Writable(Text metric, Text ts, IntWritable v)
        {
            this.metricId = metric;
            this.timestamp = ts;
            this.value = v;
        }

        @Override
        //It serializes object data into byte stream data
        public void write(DataOutput out) throws IOException
        {
            metricId.write(out);
            timestamp.write(out);
            value.write(out);
            //Вот тут можно добавить цикл на обработку
        }

        @Override
        //overriding default readFields method.
        //It de-serializes the byte stream data
        public void readFields(DataInput in) throws IOException
        {
            metricId.readFields(in);
            timestamp.readFields(in);
            value.readFields(in);
        }


        public Text getmetricId()
        {
            return metricId;
        }
        public Text getTimestamp()
        {
            return timestamp;
        }
        public IntWritable getvalue()
        {
            return value;
        }


        //Setter method to set the values of WebLogWritable object
        public void set(Text metricId, Text timestamp)
        {
            this.metricId = metricId;
            this.timestamp = timestamp;
        }

        @Override
        public int compareTo(HW1Writable o) {
            if (metricId.compareTo(o.metricId) == 0){
                return (timestamp.compareTo(o.timestamp));
            }
            else return (metricId.compareTo(o.metricId));
        }
        @Override
        public boolean equals(Object o)
        {
            if (o instanceof HW1Writable){
            HW1Writable other = (HW1Writable) o;
            return metricId.equals(other.metricId) && timestamp.equals(other.timestamp);
        }
            return false;
        }
        @Override
        public int hashCode()
        {
            return metricId.hashCode();
        }
    }


    public static class HW1Mapper
            extends Mapper<LongWritable, Text, HW1Writable, IntWritable>{

        //private static IntWritable one = new IntWritable(1);

        private HW1Writable hwLog = new HW1Writable();

        private IntWritable value = new IntWritable();
        private Text timestamp = new Text();
        private Text metricId = new Text();
        private String intervalCount;




        public void map(LongWritable key, Text values, Context context
        ) throws IOException, InterruptedException {

            String interval = context.getConfiguration().get("interval");
            String intervalCount = context.getConfiguration().get("intervalCount");

            long intC =Long.parseLong(intervalCount);

            ArrayList<String> lines = new ArrayList<>();
            try(Scanner scan = new Scanner(new File("/root/laba1/bible"))){
                while(scan.hasNextLine()){
                    lines.add(scan.nextLine());
                }
            }catch (FileNotFoundException e){
                e.printStackTrace();
            }
           String[] array = lines.toArray(new String[0]);
            long tmp = 0;
            String[] words = values.toString().split(",");
            //metricId.set(words[0]);



            if ("1".equals(words[0])) {
                metricId = new Text(array[1]);
            } else if ("2".equals(words[0])) {
                metricId = new Text(array[2]);
            } else if ("3".equals(words[0])) {
                metricId = new Text(array[3]);
            } else if ("4".equals(words[0])) {
                metricId = new Text(array[4]);
            } else if ("5".equals(words[0])) {
                metricId = new Text(array[5]);
            } else if ("6".equals(words[0])) {
                metricId = new Text(array[6]);
            } else if ("7".equals(words[0])) {
                metricId = new Text(array[7]);
            } else if ("8".equals(words[0])) {
                metricId = new Text(array[8]);
            } else if ("9".equals(words[0])) {
                metricId = new Text(array[9]);
            } else {
                metricId = new Text(array[0]);
            }
            timestamp.set(words[1]);
            tmp = Long.parseUnsignedLong(String.valueOf(timestamp));
            if ("s".equals(interval)){
                tmp = tmp - (tmp % (1000 * intC));
            }else if ("m".equals(interval)){
                tmp = tmp - (tmp % (60000 * intC));
            }else if ("h".equals(interval)){
                tmp = tmp - (tmp % (3600000 * intC));
            }
            String strLong = Long.toString(tmp);
            timestamp.set(strLong);
            String str;
            str=metricId.toString();
            if ("error".equals(str)){
                value.set(1);
            }else{
                value.set(Integer.parseInt(words[2]));
            }

            hwLog.set(metricId,timestamp);
            //System.out.println("t= "+ timestamp);
            //int values = Integer.parseInt(last1);
            context.write(hwLog, value);

        }
    }

    public static class HW1Reducer
            extends Reducer<HW1Writable,IntWritable,Text,IntWritable> {
        private IntWritable result = new IntWritable();
        private Text Id = new Text();
        private Text St = new Text();
        private HW1Writable hwLog = new HW1Writable();
        //private int sum = new Integer(0);
       // private int sum1 = new Integer(0);
        //private IntWritable value = new IntWritable();

        public void reduce(HW1Writable key, Iterable<IntWritable> values,
                           Context context
        ) throws IOException, InterruptedException {
            String interval = context.getConfiguration().get("interval");
            String intervalCount = context.getConfiguration().get("intervalCount");
            int sum = 0;
            String test;

            //value = values.getvalue();
            //sum = 0;
            Id = key.getmetricId();
            for (IntWritable val :values) {
                sum +=val.get();

            }

                St = key.getTimestamp();
                test = Id.toString();
                test += ",";
                test = test.concat(St.toString());
            test += "," +intervalCount + interval;
            result.set(sum);
            context.write(new Text(test), result);

        }
    }
    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();

        conf.set("mapred.textoutputformat.separator", ",");

        conf.set("intervalCount",args[2]);
        conf.set("interval",args[3]);
        Job job = Job.getInstance(conf, "HW1");
        job.setJarByClass(HW1.class);

        job.setMapperClass(HW1Mapper.class);
        //job.setCombinerClass(HW1Reducer.class);
        job.setReducerClass(HW1Reducer.class);
        job.setMapOutputKeyClass(HW1Writable.class);
        job.setMapOutputValueClass(IntWritable.class);

        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);
        // job.setInputFormatClass(KeyValueTextInputFormat.class);
        //  job.setOutputFormatClass(TextOutputFormat.class);


        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));
        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}
